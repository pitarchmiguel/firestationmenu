---
import Layout from '../../layouts/Layout.astro';
import menuData from '../../components/menu.json'; // Ajusta la ruta si es necesario


// Generar rutas estáticas para cada categoría
export async function getStaticPaths() {
  return menuData.menu.map(category => ({
    params: { 
      id: category.id
    }
  }));
}


// Obtener el ID de la categoría desde la URL
const { id } = Astro.params;

// Buscar la categoría correspondiente
const categoryData = menuData.menu.find((item) => item.id === Number(id));


if (!categoryData) {
  throw new Error(`La categoría ${id} no se ha encontrado`);
}

---

<Layout>
<div class="contenedor">
    <div class="overflow-scroll" id="carta">
      <div class="atras">
        <a href="/"><svg  xmlns="http://www.w3.org/2000/svg"  width="36"  height="36"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-left-dashed"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12h6m3 0h1.5m3 0h.5" /><path d="M5 12l6 6" /><path d="M5 12l6 -6" /></svg></a>
      
      <img class="logo" src="/images/logo_firestation.png" alt="logo" class="logo">
      
      </div>
      <div>
        {categoryData && categoryData.items.map(item => (
          item.inStock === false ? null : (
            <div class="product-card">
              <div class="product-info">
                <h3 class="product-title">{item.name}</h3>
                <p class="product-description">{item.ingredients}</p>
                <p class="product-price">
                  {item.price === 0 
                  ? 'Consultar el precio' 
                  : `${item.price.toFixed(2)} €`}
                </p>
              </div>
              {item.image && (
                <>
                  <div class="product-image">
                    <img 
                      src={item.image} 
                      alt={item.name} 
                      class="cursor-pointer"
                      data-modal-target={`modal-${item.name.replace(/\s+/g, '-')}`}
                    />
                  </div>
                  
                  <!-- Modal -->
                  <div id={`modal-${item.name.replace(/\s+/g, '-')}`} class="fixed inset-0 bg-black bg-opacity-50 flex justify-center hidden items-center">
                    <div class="bg-white p-4 rounded-lg relative w-[80%] h-[0%]">
                      <button class="absolute top-8 right-8 text-black text-4xl font-bold" data-modal-close>&times;</button>
                      <img src={item.image} alt={item.name} class="w-full h-full object-cover rounded-lg" />
                    </div>
                  </div>
                </>
              )}
            </div>
          )
        ))}
      </div>
    </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("[data-modal-target]").forEach(img => {
      img.addEventListener("click", () => {
        console.log("Clicked on image");
        document.getElementById(img.dataset.modalTarget).classList.remove("hidden");
      });
    });

    document.querySelectorAll("[data-modal-close]").forEach(btn => {
      btn.addEventListener("click", () => {
        const modal = btn.closest(".fixed");
        if (modal) {
          modal.classList.add("hidden");
        }
      });
    });

    const img = document.getElementById('your-image-id') as HTMLElement | null;
    if (img && img.dataset.modalTarget) {
      const modalElement = document.getElementById(img.dataset.modalTarget);
      if (modalElement) {
        modalElement.classList.remove("hidden");
      }
    }
  });
</script>

</Layout>
<style>
  .logo {
    width: 60px;
    height: 60px;
    padding: 10px;
  }
  
  .logo img {
    object-fit: cover;
  }
  .contenedor {
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
  }
  
  .carta {
    width: 100%;
    background-color: var(--gray_050);
    box-shadow: var(--gray_400);
}
.atras {
  display: flex;
  justify-content: space-between;
  align-items: center;
  top: 0px;
  width: 100%; /* Se ajusta al ancho del contenedor padre */
  background-color: rgb(255, 255, 255); /* Fondo semitransparente (tomato con opacidad) *//* Asegura que esté sobre otros elementos */
  padding: 10px; /* Espaciado interno */
}

.atras a {
  display: block;
  color: #333;
  padding: 10px;
}
  .product-card {
  display: flex;
  align-items: center;
  background-color: #fff;
  border-bottom: 1px solid #ddd;
  padding: 16px;
  margin: auto;
}

.product-info {
  flex: 1;
  margin-right: 16px;
}

.product-title {
  font-size: 1.2rem;
  font-weight: 600;
  color: #4d4d4d;
  
}

.product-description {
  font-size: 1rem;
  color: #757575;
  margin: 0 0 12px;
}

.product-price {
  font-size: 1.1rem;
  font-weight: 700;
  color: #373737;
  margin: 0;
}

.product-image img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 8px;
  border: 1px solid #ddd;
}
</style>